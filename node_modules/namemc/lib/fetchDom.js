"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchDOM = void 0;
var cheerio_1 = __importDefault(require("cheerio"));
var node_fetch_1 = __importDefault(require("node-fetch"));
function fetchDOM(path) {
    return __awaiter(this, void 0, void 0, function () {
        var response, body, $, status, ray, rayID;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, node_fetch_1.default("https://namemc.com/" + path)];
                case 1:
                    response = _a.sent();
                    return [4 /*yield*/, response.text()];
                case 2:
                    body = _a.sent();
                    $ = cheerio_1.default.load(body);
                    // Make sure its available
                    if ($("#status-bar").html() !== null) {
                        status = $("#status-bar").children(".card-body")
                            .children(".row")
                            .children(".col-md-5")
                            .children(".row")
                            .children(".col-sm-6")
                            .first()
                            .children("div")
                            .last()
                            .text();
                        if (status === "Available*")
                            throw new Error("Username is not in use.");
                    }
                    // Get if user is being rate limited
                    if (/Error:\s429\s\((\w|\s)*\)Retry-After:\s((\w|\s)+)*/g.test($(".my-2").text()))
                        throw new Error("You are being rate limited. Retry after: 5 seconds.");
                    // Get if cloudflare blocked the request
                    if ($("body").text()
                        .includes("Cloudflare")) {
                        ray = $("body")
                            .text()
                            .split("\n")
                            .filter(function (line) { return line.replace(/\s|\s/g, "") !== ""; })
                            .slice(12)[0];
                        rayID = parseInt(ray.split(": ")[1], 16);
                        throw new Error("Cloudflare has rejected the request. Ray ID: " + rayID);
                    }
                    // Return DOM
                    return [2 /*return*/, $];
            }
        });
    });
}
exports.fetchDOM = fetchDOM;
//# sourceMappingURL=fetchDom.js.map