"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function scraper($) {
    // Start parsing HTML
    var data = $("body > main > div");
    // Parse the right side of the data rows
    var rightData = data.children(".order-md-2").children(".card.mb-3");
    // Parse the left side of the data rows
    var leftData = data.children(".order-md-1").children(".card.mb-3");
    // The ID Name MC assigned to this account.
    var profileId = rightData
        .children(".card-body.py-1")
        .children(".row")
        .eq(2)
        .children(".col-12")
        .text()
        .split("/")[1];
    // The accounts current Minecraft username.
    var currentName = rightData
        .eq(1)
        .children(".card-body.py-1")
        .children(".row")
        .first()
        .children(".col")
        .children(".row.no-gutters")
        .children(".col")
        .children("a")
        .text();
    // The accounts static UUID.
    var uuid = rightData
        .children(".card-body.py-1")
        .children(".row")
        .first()
        .children(".col-12")
        .children("samp")
        .text();
    // An array of of skins the user has previously used.
    var pastSkins = Object.values(leftData.eq(1).children(".card-body")
        .children("a"))
        .filter(function (elem) { return elem.type === "tag"; })
        .map(function (elem) { return $(elem); })
        .filter(function (elem) { return elem !== undefined; })
        .map(function (skin) {
        var _a;
        // Get has of the skin
        var hash = (_a = skin === null || skin === void 0 ? void 0 : skin.attr("href")) === null || _a === void 0 ? void 0 : _a.split("/")[2];
        // If the has dosnt exist skip to next iteration
        if (hash === undefined)
            return null;
        return (new /** @class */ (function () {
            function PastSkin() {
                var _a;
                this.url = "https://texture.namemc.com/" + (hash === null || hash === void 0 ? void 0 : hash.substr(0, 2)) + "/" + (hash === null || hash === void 0 ? void 0 : hash.substr(2, 2)) + "/" + hash + ".png";
                this.model = skin.children("canvas").data("model");
                this.changedAt = new Date(((_a = skin === null || skin === void 0 ? void 0 : skin.children("canvas")) === null || _a === void 0 ? void 0 : _a.attr("title")) + "").getTime();
            }
            return PastSkin;
        }()));
    })
        .filter(function (elem) { return elem !== null; });
    // An object containing info about the skins the user had.
    var skins = {
        // A link to the current skin the user is using.
        currentSkin: "https://crafatar.com/skins/" + uuid,
        // An object of images of the skin renders provided by Crafatar.
        renders: {
            // A URL to the user's standing render PNG.
            body: "https://crafatar.com/renders/body/" + uuid + "?overlay",
            // A URL to the user's cape PNG.
            cape: "https://crafatar.com/capes/" + uuid,
            // A URL to the user's face PNG.
            face: "https://crafatar.com/avatars/" + uuid + "?overlay",
            // A URL to the user's head render PNG.
            head: "https://crafatar.com/renders/head/" + uuid + "?overlay"
        },
        pastSkins: pastSkins
    };
    // An array of objects containing the user's previous names and when they were changed.
    var pastNames = Object.values(rightData.eq(1).children(".card-body.py-1")
        .children(".row"))
        .filter(function (elem) { return elem.type === "tag"; })
        .map(function (elem) { return $(elem); })
        .map(function (elem) {
        var name = elem
            .children(".col")
            .children(".row.no-gutters")
            .children(".col")
            .children("a")
            .text();
        var changedAtNum = new Date(elem
            .children(".col")
            .children(".row.no-gutters")
            .children(".col-12")
            .children("time")
            .text()).getTime();
        var changedAt = isNaN(changedAtNum) ? null : changedAtNum;
        return (new /** @class */ (function () {
            function PastName() {
                this.name = name;
                this.changedAt = changedAt;
            }
            return PastName;
        }()));
    })
        .reverse();
    // Return player as interface
    return (new /** @class */ (function () {
        function NameMCUser() {
            this.profileId = profileId;
            this.currentName = currentName;
            this.uuid = uuid;
            this.skins = skins;
            this.pastNames = pastNames;
        }
        return NameMCUser;
    }()));
}
exports.default = scraper;
//# sourceMappingURL=scraper.js.map